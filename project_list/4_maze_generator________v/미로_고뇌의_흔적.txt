미로 어떻게 만들까
c로 만들 수 있긴 한걸까

maze generator
1. c 아니면 cpp
일단 먼저 9*9칸으로 만들어보자.
#9칸이라는 걸 상수로 정하고 시작하면 나중에 고치기 편하다.
(짝,홀)(홀,짝)에 임의벽 세울 수 있음
(짝,짝)은 무조건 벽
(홀,홀)은 무조건 공백
1부터 7까지, 0이거나 8이면 무조건 외부벽

//여기까지가 기본값

외부벽으로부터 안쪽으로 붙어서 생기는 벽의 뿌리들은
1.외부벽과 단 한개의 면만 닿아야함
2. 다른 뿌리들과 닿지 않아야함
3. 이런 식으로 모든 고정벽들을 뿌리와 이어줘야함
   대부분의 고정벽들은 주변의 임의벽 두개를 끼고 있지만,
   뿌리의 끝부분은 주변의 임의벽이 한개밖에 없다.//뿌리의 끝자락

//여기까지가 빌드 규칙

1. 임의벽 빌드는 외부에서 내부로 들어가면서 만들도록 한다.
2. 임의벽 바로 안쪽의 임의벽은 랜덤으로 생성한다. 이때 뿌리의 첫 부분이
   정해진다.
3. 바로 다음 안쪽부터 빌드 규칙을 따라 임의벽을 세운다.
   첫번째 완전임의
   두번째 case2 제외후 임의
   세번째 공허 주변이 모두 사면으로 막히면 안됨 이런 케이스 제외
   case2 제외 후 case 3 충족 후 임의 부여
   case3 충족시, 임의의 필수생성중 한 벽을 생성 후에, 뿌리 뭉치가 외부와 연결
   이 됬다면 이러한 사실을 즉각 반영, 아니라면 임의의 필수생성벽 변화 x
   임의벽 생성상태 :무조건 x, 임의, 무조건 o
    고려할 블럭: 세번째 설치 하나도 안됨and 외부 연결 안됨 이런애들 기준으로
    이후, 공허가 사면으로 막히는지 검사하면서 임의추가

네번째부터 더욱 신중
   외각과 이어진 뿌리가 있고 아닌 뿌리가 있다.
   이때,  이어진 뿌리끼리 이어지면 안됨

   외부 뿌리 판별 메커니즘:
   외각부터 이어진 뿌리와 이어지지 않은 뿌리를 구분하기 위해,
   외각과 직접 이어진 임의벽 or 고정벽에 이어진 뿌리라는 값을 부여한 뒤,
   이들과 이어져있는 인접한 벽에도 같은 값을 부여한다. 이때, 값이 있는 뿌리들
   끼리 이어질 가능성이 생긴다면 무조건 이러한 상황을 배제시킨다.
   또한, 외각과 이어지지 않는 뿌리가 있다면, 출구와 이어진 길은 2개 이상이 생
   기므로, 외각과 완전히 차단되리라 예상되는 뿌리는 인접한 뿌리(아무거나)랑
   무조건 이어준다. 이후 임의벽을 임의로 부여한다.

   짝수번째에는, 고정벽 사이에 임의벽을 집어넣는 상황이 오면,
   필수조건을 고려할 필요 없이 제외조건만 고려하면 된다.
   ...가 아니다! 짝수번째에도 고려해야한다.
   짝수번째에는 모서리 부분만 필수조건을 고려하면 된다.



제외조건: 사면이 막히면 안됨, 시행 결과로 인해 막히는 공간이 생성되면 안됨
	if 막혔다.->막혔다는 정보 안쪽으로 전달, 전달받은 벽은 무조건 생성x
            삼면으로 막힌 벽은 이러한 신호를 전달하며, 생성 깊이까지만 전달한	다.

필수조건: 모든 뿌리가 결과적으로 외부와 이어진 뿌리여야함
            a. 미설치 시, 완전히 외부와 격리될 가능성이 있는 뿌리라면
	설치 1순위/현재 깊이에 이어져있는 뿌리가 없다 and 고립되어있다.
	b.피드백 후 조건 소거
	c.



한 층 전부 끝낸 후, 그래도 외부와 연결되어 있지 않은 뿌리가 있다면,
검사 후 이어주도록 하자.

그러면
완성!
다시 필수 조건과 제외 조건을 정리하자.
제외조건: 사면이 막히면 안됨, 시행 결과로 인해 막히는 공간이 생성되면 안됨
	if 막혔다.->막혔다는 정보 안쪽으로 전달, 전달받은 벽은 무조건 생성x
            삼면으로 막힌 벽은 이러한 신호를 전달하며, 생성 깊이까지만 전달한	다.

필수조건: 모든 뿌리가 결과적으로 외부와 이어진 뿌리여야함
            a. 미설치 시, 완전히 외부와 격리될 가능성이 있는 뿌리라면
	설치 1순위/현재 깊이에 이어져있는 뿌리가 없다 and 고립되어있다.
	b.피드백 후 조건 소거

이제 자연어로 알고리즘을 작성 한 후에
순서도로 구체적인 방안을 모색하자.

자연어로
base.최외각(1,0),(n-1,n)제외 전부 고정벽으로 채운다.
(짝수,짝수)라면 고정벽을 생성한다.
공허 개념 도입, 임의벽 개념 도입, 깊이 개념 도입, 외부뿌리 여부 개념 도입, 폐쇄판별 여부 개념 도입

1.depth=1일때 제외조건 x 필수조건 x 임의 도입
2.depth=2일때 제외조건 0 필수조건 모서리만 설치시 바로 피드백 후 임의 도입
3.depth=3일때 제외조건 0 필수조건 0 임의 도입
4.depth=4일때 제외조건 0 필수조건 모서리만 설치시 바로 피드백 후 임의도입
.....
n.전부 완료하고 난 뒤 중심과 이어져있음에도 불구하고 외부와 연결되지 않은 뿌리가 있다면 0값을 가진 d=2 고정벽과 인접한 d=1임의벽을 하나 생성

완료!

뿌리 판별 매커니즘
1. 각 고정벽에 외부판별변수가 있다고 가정
2. 외부와 연결되었을 경우 1을 부여받음
3. 서로 이어지려고 할 시 사이의 두 고정벽 모두 1의 값을 가지고 있다면
   그 임의의 벽은 설치 못함
고립 판별 매커니즘
1.공허가 삼면으로 막힐 시 고립판별변수 1을 부여
2.막히지 않은 임의벽을 사이로 인접한 공허에 고립판별변수를 1을 부여
3.설치하려고한 임의벽 바로 주변의 공허가 고립판별변수 1을 가지고 있다면
   그 임의의 벽은 설치 못함

typedef{
int x;
int y;
int wall;  0은 미설치 1은 설치
int root; 0은 외부뿌리x 1은 외부뿌리 0
int stuck;	0은 고립상태x 1은 고립상태 0
}

1121112/2231221/2222232/2134212/1133311/2122121/2222221
9/13/15/15/13/11/13
총합 91개
1이

도합 17*17칸
고정벽:7*7칸	(17-1)/2-1
공허:8*8칸	(17-1)/2

17*17-((17-1)/2)*((17-1)/2)-(((17-1)/2)-1)*(((17-1)/2)-1)=

1.외부 뿌리와 연결된 2뿌리부터 시작
2. 서로서로 연결
3.막다른길 봉착하면 봉쇄
4.만난놈 또 만나면 봉쇄

외부와 아무것도 연결 안된 고정벽이 있다면 랜덤으로 한 방향의 임의벽 세우기
